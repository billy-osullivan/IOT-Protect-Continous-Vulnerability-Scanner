#!/usr/bin/python
# Author:   		William O Sullivan
# Purpose:  		This script checks devices on your network to see if they are vulnerable to Mirai and QBOT
# Designed for Ubuntu
# The following assumptions were made: The home network uses a \24 subnet
# The following need to be installed -  fping: sudo apt-get install fping
#					shodan python api: sudo pip install shodan

# Import libraries
import socket
import subprocess
import shodan
import urllib2
import telnetlib
import os
import re
import sys
import time
import Queue
import getpass
import base64
from time import sleep
from socket import *
from datetime import datetime
from threading import Thread



sleep(120) # wait for system to boot

#### Mirai default passwords & Qbot default passwords
user_root = ['changeme','login','guest','toor','','root','00000000','1111','1234','12345','123456','54321','666666','7ujMko0admin','7ujMko0vizxv','888888','admin','anko','default','dreambox','hi3518','ikwb','juantech','jvbzd','klv123','klv1234','pass','password','realtek','system','user','vizxv','xc3511','xmhdipc','zlxx.','Zte521','service ','service']
user_666666 = '666666'
user_888888 = '888888'
user_mother = 'fucker'
user_supervisor = 'supervisor'
user_support = 'support'
user_tech = 'tech'
user_ubnt = 'ubnt'
user_user = ["user","root", "toor", "admin", "user", "guest", "login", "changeme", "1234", "12345", "123456", "default", "pass", "password"]
user_guest =  ["root", "toor", "admin", "user", "guest", "login", "changeme", "1234", "12345", "123456", "default", "pass", "password"]
user_administrator = '1234'
user_Administrator = 'admin'
user_admin1 = 'password'
user_admin = ['default','user', 'guest', 'login', 'changeme','root', 'toor','','1111','1111111','1234','12345','123456','54321','7ujMko0','admin','1234','meinsm','pass','password','smcadmin']
user_login = ["root", "toor", "admin", "user", "guest", "login", "changeme", "1234", "12345", "123456", "default", "pass", "password"]


#### Mirai & QBOT default login names
mirai_name = ['login','root','666666','888888','mother','supervisor','support','tech','ubnt','user','guest','administrator','Administrator','admin1','admin','pi']

# Telnet function, gets value for user name, password and host ip passed to it. Attempts to log into device using mirai credential list
def telnet(usr,pwd,host):
	tn = telnetlib.Telnet(host,23,2)
	tn.read_until("login: ",2)
	tn.write(usr + '\n')
	if pwd:
		tn.read_until("Password: ",2)
		tn.write(pwd + "\n")
	tn.write("ls\n")
	tn.write("exit\n")
	tn.read_all()
	x = 'Host: ' + host + ' compromised. The user name is: ' + usr + ' The password is: ' + pwd
	tn.close()
	return(x)

# Telnet bruteforce function - Passes the mirai credentials to telnet function along with the ip address to attempt login.
def telnet_brute(host):
	y = 0
	port = 23
	for name in mirai_name:
		user = name
		if user == 'root':
			for password in user_root:
				try:
					y = telnet(user,password,host)					
				except:
					pass
		elif user == '666666':
			password = '666666'
			try:
				y = telnet(user,password,host)
			except:
				pass
		elif user == '888888':
			password = '888888'
			try:				
				y = telnet(user,password,host)
			except:
				pass		
		elif user == 'mother':
			password = 'fucker'
			try:				
				y = telnet(user,password,host)
			except:
				pass
		elif user == 'supervisor':
			password = 'supervisor'
			try:				
				y = telnet(user,password,host)
			except:
				pass
		elif user == 'support':
			password = 'support'
			try:				
				y = telnet(user,password,host)
			except:
				pass
		elif user == 'tech':
			password = 'tech'
			try:				
				y = telnet(user,password,host)
			except:
				pass
		elif user == 'ubnt':
			password = 'ubnt'
			try:				
				y = telnet(user,password,host)
			except:
				pass
		elif user == 'guest':
			for password in user_guest:
				try:					
					y = telnet(user,password,host)
				except:
					pass
		elif user == 'administrator':
			password = '1234'
			try:				
				y = telnet(user,password,host)
			except:
				pass
		elif user == 'Administrator':
			password = 'admin'
			try:				
				y = telnet(user,password,host)
			except:
				pass
		elif user == 'admin1':
			password = 'password'
			try:				
				y = telnet(user,password,host)
			except:
				pass
		elif user == 'admin':
			for password in user_admin:
				try:					
					y = telnet(user,password,host)
				except:
					pass
		elif user == 'pi':
			password = 'raspberry'
			try:
				y = telnet(user,password,host)
			except:
				pass
	return y


# Function to get ip address of main interface
def get_ip_address():
    s = socket(AF_INET, SOCK_DGRAM) 				# Set up a socket
    s.connect(("8.8.8.8", 80)) 						# Connect to google
    return s.getsockname()[0]  						# Return the ip address of the interface used to connect to google

# Function to get listening devices IP address range. Assumes /24 for home network. 
# Get first three octets of internal ip address and scan entire range for replys 
# Has the host ip passed into it to get first 3 octects
def iprange_ping(hostip):
	full_ips = []
	net_range = hostip[:hostip.rfind(".")] 			# Get first 3 octets
	net_range = net_range + '.'
	with open(os.devnull, "wb") as limbo:  			# os.devnull writes results to null device, i.e. it records only the reult, the rest of the data is discarded.
		for n in xrange(1, 255):					# Range for last octet (does not scan first or last address)
			full_ip = net_range + "{0}".format(n)
			result = subprocess.Popen(["fping", "-c", "1", "-t", "400", full_ip], stdout=limbo, stderr=limbo).wait() # Ping range, each ip gets only 1 ping (-n), and 400 mSec wait for no reply (-w) 
			if result:
				pass
			else:
				full_ips.append(full_ip)   			# List containing ips, these will be the keys for the dictionary of addresses and ports.
	return full_ips

# Port scan function. Scans each listening IP address for active ports. Used by 4 threads, each scans 1/4 of the ip range from 1 to 6000
# It has the host ip, port range (start and end port) and queue number passed to it	
def scan_host(host, port_start, port_end, queue):
	open_ports = [] 							# Set up list
	r_code = 1 									# Set default r_code value
	for port in range(port_start,port_end):
		try:
			a = socket(AF_INET,SOCK_STREAM)
			a.settimeout(.07)                   # Timeout for socket to connect, i think default is over a second
			code = a.connect_ex((host, port))
			if code == 0:						# If port is open
				r_code = code
				open_ports.append(port) 		# Add port number to list
				a.close() 						# Close port
		except Exception, e:
			pass
	queue.put(open_ports)  						# Method of returning value from threads.

# Function sets up threading to speed up port scan. Uses 4 threads each thread stores its result in queue()
# After the threads are have completed they are re-joined and the values are retrieved from queue()
# has the list of ip addresses ip_list passed to it
def port_scan(ip_list):
	openports = [] 														# Set up list
	init_scan_data = {} 												# Set up dictionary
	q1 = Queue.Queue() 													# Set up queue to store results from threads
	q2 = Queue.Queue()
	q3 = Queue.Queue()
	q4 = Queue.Queue()
	for item in ip_list: 												# For each value in ip_list, scan for ports
		host = item 
		thread1 = Thread(target=scan_host, args=(host, 1, 1500, q1))   	# Create threads
		thread2 = Thread(target=scan_host, args=(host, 1501, 3000, q2))
		thread3 = Thread(target=scan_host, args=(host, 3001, 4500, q3))
		thread4 = Thread(target=scan_host, args=(host, 4501, 6000, q4))
		thread1.start() 												# Start threads
		thread2.start()
		thread3.start()
		thread4.start()
		thread1.join()													# Hold threads 1 - 4 until they all finish and then re-intergrate the thread
		thread2.join()
		thread3.join()
		thread4.join()
		openports = q1.get() + q2.get() + q3.get() +q4.get() 			# Get results from port scan
		init_scan_data[host] = openports 								# Fill dictionary with results
	return init_scan_data

# Function to get external facing IP address using shodan api
def get_external_ip(shodan_api):
	try:
		externalip = urllib2.urlopen('https://api.shodan.io/tools/myip?key={' + shodan_api + '}')
		extip = externalip.read()
		result = re.findall(r'\d{1,3}\.\d{1,3}\.\d{1,3}\.\d{1,3}', extip )
		result = str(result[0])
		return result
	except Exception, e:
		x = 0
		return x

# Function to test a single host for mirai vulnerabilities
def internal_test_function():
	compromised = 0
	op = open('Report.txt','w') 						# Open Report.txt for adding results
	x = "*** Internal Test *** \nStarted At: %s\n" % (time.strftime("%H:%M:%S")) # Time test started
	op.write(x)
	print x
	x = '''
*****************
* Internal Scan *
*****************

Now scanning your internal network to check for 
vulnerabilities.
This scan checks your local network for open ports
and checks any device open for telnet connections
for Mirai vulnerability.

'''
	print x						
	x = '\n\nProceeding with scan ...\n'
	print x
	start_time = datetime.now()
	address = get_ip_address() 							# Get private ip address 
	ip_list = iprange_ping(address) 					# Get list of available private ip addresses
	scan_result = port_scan(ip_list) 					# Get scan results of internal ip addresses and open ports
	x = '''
*******************
* IP & Ports Scan *
*******************
'''
	op.write(x)
	print x
	for keys,values in scan_result.items():  			# Loop through port scan results to display and save values to Report.txt
		x = "\nIP Address: " + str(keys) + "\nOpen Ports: "
		y = str(values) + "\n"
		op.write(x)
		op.write(y)
		print x
		print y
	x = '''
*********************
* Mirai Telnet Scan *
*********************
'''
	print x
	for keys,values in scan_result.items(): 										# This gives out each key with a list of its values
		for item in values:
			if item == 23:
				x = '\nScanning ' + keys + ' for Mirai vulnerability\n'
				print x
				op.write(x)
				compromised = telnet_brute(keys)
				if compromised != 0:
					conf = open('conf.cfg','a')
					conf.write(compromised)
					conf.close()
					op.write(compromised)
					print compromised
				else:
					x = '\nDevice not vulnerable to Mirai attack'
					op.write(x)
					print x
		else:
			pass
	stop_time = datetime.now()
	total_time_duration = stop_time - start_time
	x = "\n\nScanning Finnished At %s..." %(time.strftime("%H:%M:%S"))
	y = "\nScanning Duration: %s..." %(total_time_duration)
	z = "\n\nTesting finished, your modem can be plugged back into the internet."
	op.write(x)
	op.write(y)
	print x
	print y
	print z
	op.close()
	
	
		
# Function to display the total number of avaible IP address on network	
def external_scan_function():
	op = open('external_report.txt','w') 						# Open Report.txt for adding results
	x = '''
*****************
* External Scan *
*****************

Scanning your external network to check for 
vulnerabilities.
This scan checks Shodan's online database
for any information already available about your 
network.
It also scans your external interface to check
if it is vulnerable to known Mirai intrusion 
methods.
'''
	op.write(x)
	print x
	x = '\n\nProceeding with scan ...\n'
	print x
	compromised = 0
	x = "\nStarted At: %s\n" % (time.strftime("%H:%M:%S")) # Time test started
	op.write(x)
	print x
	start_time = datetime.now()
	x = '''
***************	
* Shodan Scan *
***************
'''
	op.write(x)
	print x
	ak = open('conf.cfg','r')
	api_key = ak.read()
	ak.close()
	api_key = api_key.split()
	shodan_api_key = api_key[-1] 
	api_key = shodan.Shodan(shodan_api_key)
	ip = get_external_ip(shodan_api_key)
	x = '\nYour external IP is: ' + ip + '\nChecking Shodan for your external address...'
	op.write(x)
	print x
	try:
		host = api.host(ip)
		x = "\nIP: %s \nService Provider: %s \nOperating System: %s" % (host['ip_str'], host.get('org', 'n/a'), host.get('os', 'n/a'))  # Print general info
		op.write(x)
		print x
		for item in host['data']:
			x = "\nPort: %s Banner: %s" % (item['port'], item['data']) # Print all banners
			op.write(x)
			print x
		return
	except Exception, e:
		x = '\nNo information available for your IP address on Shodan\n'
		op.write(x)
		print x	
	x = ''' 
**********************************
* Scanning External IP For Known *
*    Mirai Vulnerabilities       *
**********************************
'''
	compromised = 0
	print x
	x = '\nScanning your routers external IP' + ip + '\nfor Mirai vulnerability\n'
	print x
	compromised = telnet_brute(ip)
	if compromised != 0:
		op.write(compromised)
		print compromised
	else:
		x = '\nDevice not vulnerable to Mirai attack'
		op.write(x)
		print x
	stop_time = datetime.now()
	total_time_duration = stop_time - start_time
	x = "\n\nScanning Finnished At %s..." %(time.strftime("%H:%M:%S"))
	y = "\nScanning Duration: %s..." %(total_time_duration)
	op.write(x)
	op.write(y)
	print x
	print y
	op.close()
	

#### Main Code Calls ####

while True:
	internal_test_function()
	external_scan_function()
	print 'Scan done, waiting 2 minutes for next scan'
	sleep(120)
